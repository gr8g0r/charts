name: Helm Chart Lint and Test

on:
  push:
    branches: [ main, kube-prometheus-stack ]
    paths:
      - 'helm/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'helm/**'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      charts: ${{ steps.list-changed.outputs.changed }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.14.0'

      - name: Get changed charts
        id: list-changed
        run: |
          changed=$(ct list-changed --config .github/ct.yaml --target-branch ${{ github.event.repository.default_branch }})
          if [[ -n "$changed" ]]; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
            echo "Charts changed:"
            echo "$changed"
          else
            echo "changed=false" >> "$GITHUB_OUTPUT"
            echo "No charts changed"
          fi

  lint-test:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.charts == 'true'
    strategy:
      matrix:
        chart-path:
          - helm/cert-manager
          - helm/ingress-nginx  
          - helm/kube-prometheus-stack
          - helm/n8n
          - helm/grafana-prometheus-stack
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.14.0'

      - name: Add Helm repositories
        run: |
          helm repo add jetstack https://charts.jetstack.io
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo update

      - name: Check if chart exists
        id: check-chart
        run: |
          if [[ -f "${{ matrix.chart-path }}/Chart.yaml" ]]; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
            echo "Chart found at ${{ matrix.chart-path }}"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
            echo "No Chart.yaml found at ${{ matrix.chart-path }}"
          fi

      - name: Update chart dependencies
        if: steps.check-chart.outputs.exists == 'true'
        run: |
          cd ${{ matrix.chart-path }}
          if [[ -f "Chart.yaml" ]]; then
            echo "Updating dependencies for $(basename $(pwd))"
            helm dependency update
            if [[ $? -ne 0 ]]; then
              echo "::error::Failed to update dependencies for ${{ matrix.chart-path }}"
              exit 1
            fi
          fi

      - name: Lint Helm chart
        if: steps.check-chart.outputs.exists == 'true'
        run: |
          cd ${{ matrix.chart-path }}
          echo "Linting chart: $(basename $(pwd))"
          helm lint .
          if [[ $? -ne 0 ]]; then
            echo "::error::Helm lint failed for ${{ matrix.chart-path }}"
            exit 1
          fi

      - name: Validate chart templates
        if: steps.check-chart.outputs.exists == 'true'
        run: |
          cd ${{ matrix.chart-path }}
          echo "Validating templates for: $(basename $(pwd))"
          
          # Test with default values
          helm template test-release . --debug --dry-run
          if [[ $? -ne 0 ]]; then
            echo "::error::Template validation failed with default values for ${{ matrix.chart-path }}"
            exit 1
          fi
          
          # Test with environment-specific values if they exist
          for values_file in values-*.yaml *-values.yaml; do
            if [[ -f "$values_file" && "$values_file" != "values.yaml" ]]; then
              echo "Testing with values file: $values_file"
              helm template test-release . -f "$values_file" --debug --dry-run
              if [[ $? -ne 0 ]]; then
                echo "::error::Template validation failed with $values_file for ${{ matrix.chart-path }}"
                exit 1
              fi
            fi
          done

      - name: Check for missing dependencies
        if: steps.check-chart.outputs.exists == 'true'
        run: |
          cd ${{ matrix.chart-path }}
          chart_name=$(basename $(pwd))
          echo "Checking dependencies for: $chart_name"
          
          # Check if Chart.lock exists when dependencies are defined
          if [[ -f "Chart.yaml" ]]; then
            deps_count=$(yq '.dependencies // [] | length' Chart.yaml)
            if [[ "$deps_count" -gt 0 ]]; then
              if [[ ! -f "Chart.lock" ]]; then
                echo "::error::Chart.lock missing but dependencies defined in Chart.yaml for ${{ matrix.chart-path }}"
                echo "Run 'helm dependency update' to generate Chart.lock"
                exit 1
              fi
              
              # Verify charts directory exists
              if [[ ! -d "charts" ]]; then
                echo "::error::charts/ directory missing but dependencies defined for ${{ matrix.chart-path }}"
                echo "Run 'helm dependency update' to download dependencies"
                exit 1
              fi
              
              # Check if all dependencies are downloaded
              while IFS= read -r dep_name; do
                if [[ -n "$dep_name" ]]; then
                  found=false
                  for chart_file in charts/*.tgz; do
                    if [[ -f "$chart_file" && "$chart_file" == *"$dep_name"* ]]; then
                      found=true
                      break
                    fi
                  done
                  for chart_dir in charts/*/; do
                    if [[ -d "$chart_dir" && "$(basename "$chart_dir")" == "$dep_name" ]]; then
                      found=true
                      break
                    fi
                  done
                  if [[ "$found" == false ]]; then
                    echo "::error::Dependency '$dep_name' not found in charts/ directory for ${{ matrix.chart-path }}"
                    echo "Run 'helm dependency update' to download missing dependencies"
                    exit 1
                  fi
                fi
              done < <(yq '.dependencies[].name' Chart.yaml)
              
              echo "✅ All dependencies verified for $chart_name"
            else
              echo "ℹ️  No dependencies defined for $chart_name"
            fi
          fi

      - name: Verify Chart.yaml structure
        if: steps.check-chart.outputs.exists == 'true'
        run: |
          cd ${{ matrix.chart-path }}
          echo "Verifying Chart.yaml structure for: $(basename $(pwd))"
          
          # Check required fields
          required_fields=("apiVersion" "name" "version" "description")
          for field in "${required_fields[@]}"; do
            value=$(yq ".$field" Chart.yaml)
            if [[ "$value" == "null" || -z "$value" ]]; then
              echo "::error::Required field '$field' missing or empty in Chart.yaml for ${{ matrix.chart-path }}"
              exit 1
            fi
          done
          
          # Validate version format (should be semver)
          version=$(yq '.version' Chart.yaml)
          if [[ ! "$version" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-.*)?$ ]]; then
            echo "::warning::Chart version '$version' doesn't follow semantic versioning for ${{ matrix.chart-path }}"
          fi
          
          echo "✅ Chart.yaml structure valid"

  security-scan:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.charts == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.14.0'

      - name: Install helm security plugins
        run: |
          helm plugin install https://github.com/stackrox/kube-linter || true

      - name: Run security scans
        run: |
          for chart_dir in helm/*/; do
            if [[ -f "$chart_dir/Chart.yaml" ]]; then
              chart_name=$(basename "$chart_dir")
              echo "🔍 Scanning $chart_name for security issues..."
              
              # Generate templates for security scanning
              mkdir -p /tmp/rendered/$chart_name
              cd "$chart_dir"
              helm template security-scan . --output-dir /tmp/rendered/$chart_name/ || continue
              
              # Scan for common security issues
              echo "Checking for privileged containers..."
              grep -r "privileged.*true" /tmp/rendered/$chart_name/ && echo "::warning::Privileged containers found in $chart_name" || true
              
              echo "Checking for host network usage..."
              grep -r "hostNetwork.*true" /tmp/rendered/$chart_name/ && echo "::warning::Host network usage found in $chart_name" || true
              
              echo "Checking for host PID usage..."
              grep -r "hostPID.*true" /tmp/rendered/$chart_name/ && echo "::warning::Host PID usage found in $chart_name" || true
              
              cd - > /dev/null
            fi
          done

  integration-test:
    runs-on: ubuntu-latest
    needs: [detect-changes, lint-test]
    if: needs.detect-changes.outputs.charts == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.14.0'

      - name: Create kind cluster
        uses: helm/kind-action@v1
        with:
          cluster_name: helm-test
          kubectl_version: v1.28.0

      - name: Add Helm repositories
        run: |
          helm repo add jetstack https://charts.jetstack.io
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo update

      - name: Test chart installations
        run: |
          # Test lightweight charts that can run in CI
          charts_to_test=("helm/n8n")
          
          for chart_path in "${charts_to_test[@]}"; do
            if [[ -f "$chart_path/Chart.yaml" ]]; then
              chart_name=$(basename "$chart_path")
              echo "🧪 Testing installation of $chart_name..."
              
              cd "$chart_path"
              helm dependency update
              
              # Install with dry-run first
              helm install "test-$chart_name" . --dry-run --debug
              
              # Install for real with minimal resources
              helm install "test-$chart_name" . --set resources.requests.memory=128Mi --set resources.requests.cpu=100m --wait --timeout=300s
              
              # Verify installation
              kubectl get pods -l app.kubernetes.io/instance="test-$chart_name"
              
              # Cleanup
              helm uninstall "test-$chart_name"
              
              cd - > /dev/null
            fi
          done

  summary:
    runs-on: ubuntu-latest
    needs: [detect-changes, lint-test, security-scan, integration-test]
    if: always()
    steps:
      - name: Summary
        run: |
          echo "## Helm Chart Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY  
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Chart Detection | ${{ needs.detect-changes.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Lint & Test | ${{ needs.lint-test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Test | ${{ needs.integration-test.result }} |" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.lint-test.result }}" == "failure" ]]; then
            echo "❌ Helm chart linting failed. Check the logs above for details." >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.detect-changes.outputs.charts }}" == "true" ]]; then
            echo "✅ All Helm charts passed validation!" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️  No chart changes detected, skipping validation." >> $GITHUB_STEP_SUMMARY
          fi